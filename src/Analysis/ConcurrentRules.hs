{-# LANGUAGE FlexibleContexts #-}
module Analysis.ConcurrentRules
( CRDependencies (..),
  allConcurrentRules,
  maxConcurrentRule
) where

import           Abstract.Morphism
import           Abstract.AdhesiveHLR
import           Abstract.DPO
import           Analysis.CriticalSequence (criticalSequences,getComatch)

data CRDependencies = AllOverlapings | OnlyDependency

-- | Generates the Concurrent Rules for a given list of GraphRules following the order of the elements in the list. If the first argument evaluates to True, it will calculate only rules generated by Injective EpiPairs
allConcurrentRules :: (DPO m, EpiPairs m, Eq (Obj m)) => CRDependencies -> Bool -> Bool -> [Production m] -> [Production m]
allConcurrentRules _ _ _ [] = []
allConcurrentRules _ _ _ [x] = [x]
allConcurrentRules dep nacInj injectiveOnly (x:xs) = concatMap (crs x) (allCRs xs)
  where
    crs = concurrentRules dep nacInj injectiveOnly
    allCRs = allConcurrentRules dep nacInj injectiveOnly

-- | Generates the Concurrent Rule with the least disjoint EpiPair for a given list of GraphRules (following the order of the elements in the list). If the first argument evaluates to True, it will generate only the least disjoint injective EpiPair
maxConcurrentRule :: (DPO m, EpiPairs m, Eq (Obj m)) => CRDependencies -> Bool -> Bool -> [Production m] -> Production m
maxConcurrentRule dep nacInj injectiveOnly rules = last $ maxConcurrentRules dep nacInj injectiveOnly rules

maxConcurrentRules :: (DPO m, EpiPairs m, Eq (Obj m)) => CRDependencies -> Bool -> Bool -> [Production m] -> [Production m]
maxConcurrentRules _ _ _ [] = []
maxConcurrentRules _ _ _ [x] = [x]
maxConcurrentRules dep nacInj injectiveOnly (x:xs) = map (singleCR x) (maxCRs xs)
  where
    singleCR = maxConcurrentRuleForLastPair dep nacInj injectiveOnly
    maxCRs = maxConcurrentRules dep nacInj injectiveOnly

concurrentRules :: (DPO m, EpiPairs m, Eq (Obj m)) => CRDependencies -> Bool -> Bool -> Production m -> Production m -> [Production m]
concurrentRules dep nacInj isInjective c n =
  let epiPairs = epiPairsForConcurrentRule dep nacInj isInjective c n
  in map (concurrentRuleForPair nacInj isInjective c n) epiPairs

maxConcurrentRuleForLastPair :: (DPO m, EpiPairs m, Eq (Obj m)) => CRDependencies -> Bool -> Bool -> Production m -> Production m -> Production m
maxConcurrentRuleForLastPair dep nacInj isInjective c n =
  let epiPair = last (epiPairsForConcurrentRule dep nacInj isInjective c n)
  in concurrentRuleForPair nacInj isInjective c n epiPair

epiPairsForConcurrentRule :: (DPO m, EpiPairs m)
                             => CRDependencies -> Bool -> Bool
                             -> Production m -> Production m -> [(m, m)]
epiPairsForConcurrentRule OnlyDependency nacInj matchInj c n =
  let dependencies = criticalSequences nacInj matchInj c n
  in map getComatch dependencies
epiPairsForConcurrentRule _ _ matchInj c n =
  let allPairs = createPairsCodomain matchInj (right c) (left n)
      isValidPair (lp, rp) = satsGluing matchInj (right c) lp && satsGluing matchInj (left n) rp
  in filter isValidPair allPairs

concurrentRuleForPair :: (DPO m, EpiPairs m, Eq (Obj m)) => Bool -> Bool -> Production m -> Production m -> (m, m) -> Production m
concurrentRuleForPair nacInj inj c n pair = production l r (dmc ++ lp)
  where
    pocC = pushoutComplement (fst pair) (right c)
    pocN = pushoutComplement (snd pair) (left n)
    poC = pushout (fst pocC) (left c)
    poN = pushout (fst pocN) (right n)
    pb = injectivePullback (snd pocC) (snd pocN)
    l = compose (fst pb) (snd poC)
    r = compose (snd pb) (snd poN)
    dmc = concatMap (downwardShift inj (fst poC)) (nacs c)
    inverseP = production (snd pocC) (snd poC) []
    den = concatMap (downwardShift inj (snd pair)) (nacs n)
    lp = concatMap (shiftLeftNac nacInj inj inverseP) den
