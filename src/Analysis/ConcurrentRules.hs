{-# LANGUAGE FlexibleContexts #-}
module Analysis.ConcurrentRules
( allConcurrentRules,
  maxConcurrentRule
) where

import           Abstract.Morphism
import           Abstract.AdhesiveHLR
import           Abstract.DPO

-- | Generates the Concurrent Rules for a given list of GraphRules following the order of the elements in the list. If the first argument evaluates to True, it will calculate only rules generated by Injective EpiPairs
allConcurrentRules :: (DPO m, EpiPairs m, Eq (Obj m)) => Bool -> [Production m] -> [Production m]
allConcurrentRules _ [] = []
allConcurrentRules _ [x] = [x]
allConcurrentRules injectiveOnly (x:xs) = concatMap (crs x) (allCRs xs)
  where
    crs = concurrentRules injectiveOnly
    allCRs = allConcurrentRules injectiveOnly

-- | Generates the Concurrent Rule with the least disjoint EpiPair for a given list of GraphRules (following the order of the elements in the list). If the first argument evaluates to True, it will generate only the least disjoint injective EpiPair
maxConcurrentRule :: (DPO m, EpiPairs m, Eq (Obj m)) => Bool -> [Production m] -> Production m
maxConcurrentRule injectiveOnly rules = last $ maxConcurrentRules injectiveOnly rules

maxConcurrentRules :: (DPO m, EpiPairs m, Eq (Obj m)) => Bool -> [Production m] -> [Production m]
maxConcurrentRules _ [] = []
maxConcurrentRules _ [x] = [x]
maxConcurrentRules injectiveOnly (x:xs) = map (singleCR x) (maxCRs xs)
  where
    singleCR = maxConcurrentRuleForLastPair injectiveOnly
    maxCRs = maxConcurrentRules injectiveOnly

concurrentRules :: (DPO m, EpiPairs m, Eq (Obj m)) => Bool -> Production m -> Production m -> [Production m]
concurrentRules isInjective c n = map (concurrentRuleForPair c n) $ pairs isInjective c n

pairs :: (EpiPairs m, DPO m) => Bool -> Production m -> Production m -> [(m, m)]
pairs isInjective c n = if isInjective then injectivePairs else validDpoPairs
  where
    allPairs  = createPairsCodomain False (right c) (left n) --Added flag as False to get same behavior, but change if the pair of morphism is injective
    validDpoPairs = filter (\(lp, rp) -> satsGluing False lp (inverseWithoutNacs c) && satsGluing False rp n) allPairs
    injectivePairs = filter (\(lp, rp) -> monomorphism lp && monomorphism rp) validDpoPairs

maxConcurrentRuleForLastPair :: (DPO m, EpiPairs m, Eq (Obj m)) => Bool -> Production m -> Production m -> Production m
maxConcurrentRuleForLastPair isInjective c n = concurrentRuleForPair c n (last $ pairs isInjective c n)

concurrentRuleForPair :: (DPO m, EpiPairs m, Eq (Obj m)) => Production m -> Production m -> (m, m) -> Production m
concurrentRuleForPair c n pair = production l r (dmc ++ lp)
  where
    pocC = poc (fst pair) (right c)
    pocN = poc (snd pair) (left n)
    poC = po (fst pocC) (left c)
    poN = po (fst pocN) (right n)
    pb = injectivePullback (snd pocC) (snd pocN)
    l = compose (fst pb) (snd poC)
    r = compose (snd pb) (snd poN)
    dmc = concatMap (downwardShift (fst poC)) (nacs c)
    inverseP = production (snd pocC) (snd poC) []
    den = concatMap (downwardShift (snd pair)) (nacs n)
    lp = concatMap (shiftLeftNac False inverseP) den
